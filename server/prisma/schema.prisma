// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(cuid())
  name String? 
  email String @unique 
  password String
  role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  refreshToken String? @unique
  cart Cart?
  addresses Address[]
  orders Order[]
}

model Product{
  id String @id @default(cuid())
  name String
  brand String
  description String
  category String
  gender String
  sizes String[]
  colors String[]
  price Float
  stock Int
  soldCount Int
  rating Float?
  images String[]
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt @default(now())
  isFeatured Boolean @default(false)
}

model Cart{
  id String @id @default(cuid())
  userId String @unique
  user User @relation(fields: [userId], references: [id])
  items CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id String @id @default(cuid())
  cartId String 
  cart Cart @relation(fields: [cartId], references: [id])
  productId String
  quantity Int
  size String?
  color String
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
  
  @@unique([cartId, productId, size, color])
}

model Coupon {
  id String @id @default(cuid())
  code String @unique
  discountPercent Float
  startDate DateTime
  endDate DateTime
  usageLimit Int
  usageCount Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  orders Order[]
}

model FeatureBanner {
  id        String   @id @default(cuid())
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  name String
  address String
  city String
  country String
  postalCode String
  phone String
  isDefault Boolean @default(false)
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt @default(now())
  orders Order[]

  @@index([userId])
}

model Order {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  addressId String
  address Address @relation(fields: [addressId], references: [id])
  items OrderItem[]
  couponId String?
  coupon Coupon? @relation(fields: [couponId], references: [id])
  total Float
  status OrderStatus @default(PENDING)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus
  paymentId String?
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt 
  
  @@index([userId])
  @@index([addressId])
  @@index([couponId])
}

model OrderItem{
  id String @id @default(cuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  productName String
  productCategory String
  quantity Int
  size String?
  color String?
  price Float
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt @default(now())

  @@index([orderId])
  @@index([productId])
}

enum Role {
  USER
  SUPER_ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}

enum PaymentMethod {
  CREDIT_CARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
}